/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpAttribute {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "validations", skip_serializing_if = "Option::is_none")]
    pub validations: Option<std::collections::HashMap<String, std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<models::UpAttributeRequired>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<models::UpAttributePermissions>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<models::UpAttributeSelector>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "multivalued", skip_serializing_if = "Option::is_none")]
    pub multivalued: Option<bool>,
}

impl UpAttribute {
    pub fn new() -> UpAttribute {
        UpAttribute {
            name: None,
            display_name: None,
            validations: None,
            annotations: None,
            required: None,
            permissions: None,
            selector: None,
            group: None,
            multivalued: None,
        }
    }
}

