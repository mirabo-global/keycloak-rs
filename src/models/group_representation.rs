/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupRepresentation {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "subGroupCount", skip_serializing_if = "Option::is_none")]
    pub sub_group_count: Option<i64>,
    #[serde(rename = "subGroups", skip_serializing_if = "Option::is_none")]
    pub sub_groups: Option<Vec<models::GroupRepresentation>>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "realmRoles", skip_serializing_if = "Option::is_none")]
    pub realm_roles: Option<Vec<String>>,
    #[serde(rename = "clientRoles", skip_serializing_if = "Option::is_none")]
    pub client_roles: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<std::collections::HashMap<String, bool>>,
}

impl GroupRepresentation {
    pub fn new() -> GroupRepresentation {
        GroupRepresentation {
            id: None,
            name: None,
            path: None,
            parent_id: None,
            sub_group_count: None,
            sub_groups: None,
            attributes: None,
            realm_roles: None,
            client_roles: None,
            access: None,
        }
    }
}
