/*
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserRepresentation {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "emailVerified", skip_serializing_if = "Option::is_none")]
    pub email_verified: Option<bool>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "userProfileMetadata", skip_serializing_if = "Option::is_none")]
    pub user_profile_metadata: Option<models::UserProfileMetadata>,
    #[serde(rename = "self", skip_serializing_if = "Option::is_none")]
    pub param_self: Option<String>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "createdTimestamp", skip_serializing_if = "Option::is_none")]
    pub created_timestamp: Option<i64>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "totp", skip_serializing_if = "Option::is_none")]
    pub totp: Option<bool>,
    #[serde(rename = "federationLink", skip_serializing_if = "Option::is_none")]
    pub federation_link: Option<String>,
    #[serde(rename = "serviceAccountClientId", skip_serializing_if = "Option::is_none")]
    pub service_account_client_id: Option<String>,
    #[serde(rename = "credentials", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Vec<models::CredentialRepresentation>>,
    #[serde(rename = "disableableCredentialTypes", skip_serializing_if = "Option::is_none")]
    pub disableable_credential_types: Option<Vec<String>>,
    #[serde(rename = "requiredActions", skip_serializing_if = "Option::is_none")]
    pub required_actions: Option<Vec<String>>,
    #[serde(rename = "federatedIdentities", skip_serializing_if = "Option::is_none")]
    pub federated_identities: Option<Vec<models::FederatedIdentityRepresentation>>,
    #[serde(rename = "realmRoles", skip_serializing_if = "Option::is_none")]
    pub realm_roles: Option<Vec<String>>,
    #[serde(rename = "clientRoles", skip_serializing_if = "Option::is_none")]
    pub client_roles: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "clientConsents", skip_serializing_if = "Option::is_none")]
    pub client_consents: Option<Vec<models::UserConsentRepresentation>>,
    #[serde(rename = "notBefore", skip_serializing_if = "Option::is_none")]
    pub not_before: Option<i32>,
    #[serde(rename = "applicationRoles", skip_serializing_if = "Option::is_none")]
    pub application_roles: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "socialLinks", skip_serializing_if = "Option::is_none")]
    pub social_links: Option<Vec<models::SocialLinkRepresentation>>,
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<std::collections::HashMap<String, bool>>,
}

impl UserRepresentation {
    pub fn new() -> UserRepresentation {
        UserRepresentation {
            id: None,
            username: None,
            first_name: None,
            last_name: None,
            email: None,
            email_verified: None,
            attributes: None,
            user_profile_metadata: None,
            param_self: None,
            origin: None,
            created_timestamp: None,
            enabled: None,
            totp: None,
            federation_link: None,
            service_account_client_id: None,
            credentials: None,
            disableable_credential_types: None,
            required_actions: None,
            federated_identities: None,
            realm_roles: None,
            client_roles: None,
            client_consents: None,
            not_before: None,
            application_roles: None,
            social_links: None,
            groups: None,
            access: None,
        }
    }
}

